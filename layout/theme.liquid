<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>{{ page_title }}</title>
    {{ 'application.css' | asset_url | stylesheet_tag }}
    {{ content_for_header }}
  </head>
  <body>
    {% section 'header' %}
    <main>
      {{ content_for_layout }}
    </main>

    <script>
      class MobileSlideMenu extends HTMLElement {
        connectedCallback() {
          const toggle = this.querySelector('#menu-toggle');
          const menu = this.querySelector('#mobile-menu');
          const close = this.querySelector('#menu-close');

          if (!toggle || !menu || !close) {
            console.warn('MobileSlideMenu: Missing toggle/menu/close element.');
            return;
          }

          toggle.addEventListener('click', () => {
            menu.classList.remove('translate-x-full');
            menu.classList.add('translate-x-0');
          });

          close.addEventListener('click', () => {
            menu.classList.add('translate-x-full');
            menu.classList.remove('translate-x-0');
          });
        }
      }

      customElements.define('mobile-slide-menu', MobileSlideMenu);
    </script>

    <script>
      class ShopifySearchToggle extends HTMLElement {
        connectedCallback() {
          const openBtn = this.querySelector('#open');
          const overlay = this.querySelector('#overlay');
          const input = this.querySelector('input');
          const header = document.getElementById('site-header');

          openBtn?.addEventListener('click', (e) => {
            e.stopPropagation();

            if (header && overlay) {
              overlay.style.height = `${header.offsetHeight}px`;
            }

            overlay.classList.add('opacity-100', 'translate-y-0', 'pointer-events-auto');
            overlay.classList.remove('opacity-0', '-translate-y-2', 'pointer-events-none');
            input?.focus();
          });

          document.addEventListener('click', (e) => {
            if (!this.contains(e.target)) {
              overlay.classList.add('opacity-0', '-translate-y-2', 'pointer-events-none');
              overlay.classList.remove('opacity-100', 'translate-y-0', 'pointer-events-auto');
            }
          });

          input?.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
              overlay.classList.add('opacity-0', '-translate-y-2', 'pointer-events-none');
              overlay.classList.remove('opacity-100', 'translate-y-0', 'pointer-events-auto');
            }
            if (e.key === 'Enter') {
              window.location.href = `/search?q=${encodeURIComponent(input.value)}`;
            }
          });
        }
      }

      customElements.define('shopify-search-toggle', ShopifySearchToggle);
    </script>

    <!-- Mega Dropdown Component JS -->
    <script>
      class MegaDropdown extends HTMLElement {
        connectedCallback() {
          const button = this.querySelector('button');
          const panel = this.querySelector('#panel');
          const chevron = this.querySelector('#chevron');
          const header = document.getElementById('site-header');

          button?.addEventListener('click', (e) => {
            e.stopPropagation();

            // Dynamically calculate header height
            if (header && panel) {
              const height = header.offsetHeight;
              panel.style.top = `${height}px`;
            }

            panel.classList.toggle('hidden');
            chevron.classList.toggle('rotate-180');
          });

          document.addEventListener('click', (e) => {
            if (!this.contains(e.target)) {
              panel.classList.add('hidden');
              chevron.classList.remove('rotate-180');
            }
          });
        }
      }

      customElements.define('mega-dropdown', MegaDropdown);
    </script>

    <script>
      class MediaViewer extends HTMLElement {
        connectedCallback() {
          this.mainImage = this.querySelector('#mainImage');
          this.thumbnails = this.querySelectorAll('.thumbnail');

          if (!this.mainImage || this.thumbnails.length === 0) {
            console.warn('MediaViewer: Missing main image or thumbnails.');
            return;
          }

          this.bindThumbnailEvents();
        }

        bindThumbnailEvents() {
          this.thumbnails.forEach((thumb) => {
            thumb.addEventListener('click', this.onThumbClick.bind(this));
          });
        }

        onThumbClick(event) {
          const clicked = event.currentTarget;
          const newSrc = clicked.dataset.src || clicked.src;

          if (newSrc) {
            this.mainImage.src = newSrc;
          }
        }
      }

      customElements.define('media-viewer', MediaViewer);
    </script>
  </body>
</html>
